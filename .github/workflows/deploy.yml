name: Deployment Pipeline

on:
  workflow_run:
    workflows: ["CI Pipeline"]
    types:
      - completed
    branches:
      - main
      - develop
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      force_deploy:
        description: 'Force deployment even if CI failed'
        required: false
        default: false
        type: boolean

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Determine deployment environment
  environment-check:
    name: Environment Check
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event.inputs.force_deploy == 'true' || github.event_name == 'workflow_dispatch' }}
    outputs:
      environment: ${{ steps.env.outputs.environment }}
      deploy: ${{ steps.env.outputs.deploy }}
    steps:
      - name: Determine environment
        id: env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
            echo "deploy=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "deploy=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
            echo "deploy=true" >> $GITHUB_OUTPUT
          else
            echo "environment=none" >> $GITHUB_OUTPUT
            echo "deploy=false" >> $GITHUB_OUTPUT
          fi

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: environment-check
    if: needs.environment-check.outputs.environment == 'staging' && needs.environment-check.outputs.deploy == 'true'
    environment:
      name: staging
      url: https://staging.aicode-platform.dev
    permissions:
      contents: read
      packages: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Terraform Init
        run: terraform init
        working-directory: ./infrastructure/terraform/staging

      - name: Terraform Plan
        run: terraform plan -out=staging.tfplan
        working-directory: ./infrastructure/terraform/staging

      - name: Terraform Apply
        run: terraform apply -auto-approve staging.tfplan
        working-directory: ./infrastructure/terraform/staging

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name aicode-staging --region us-west-2

      - name: Deploy to Kubernetes
        run: |
          sed -i "s|IMAGE_TAG|${{ github.sha }}|g" infrastructure/k8s/staging/deployment.yaml
          kubectl apply -f infrastructure/k8s/staging/
          kubectl rollout status deployment/aicode-api -n aicode-staging --timeout=300s

      - name: Run smoke tests
        run: |
          kubectl port-forward service/aicode-api 8080:80 -n aicode-staging &
          sleep 10
          curl -f http://localhost:8080/health || exit 1
          pkill -f "kubectl port-forward"

      - name: Update deployment status
        uses: bobheadxi/deployments@v1
        with:
          step: finish
          token: ${{ secrets.GITHUB_TOKEN }}
          status: success
          env: staging
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}

  # Deploy to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: environment-check
    if: needs.environment-check.outputs.environment == 'production' && needs.environment-check.outputs.deploy == 'true'
    environment:
      name: production
      url: https://aicode-platform.com
    permissions:
      contents: read
      packages: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create deployment
        uses: bobheadxi/deployments@v1
        id: deployment
        with:
          step: start
          token: ${{ secrets.GITHUB_TOKEN }}
          env: production

      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.28.0'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Terraform Init
        run: terraform init
        working-directory: ./infrastructure/terraform/production

      - name: Terraform Plan
        run: terraform plan -out=production.tfplan
        working-directory: ./infrastructure/terraform/production

      - name: Terraform Apply (with approval)
        run: terraform apply -auto-approve production.tfplan
        working-directory: ./infrastructure/terraform/production

      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name aicode-production --region us-east-1

      - name: Blue-Green Deployment
        run: |
          # Update deployment with new image
          sed -i "s|IMAGE_TAG|${{ github.sha }}|g" infrastructure/k8s/production/deployment.yaml
          
          # Deploy to green environment
          kubectl apply -f infrastructure/k8s/production/ --namespace=aicode-production
          
          # Wait for rollout
          kubectl rollout status deployment/aicode-api -n aicode-production --timeout=600s
          
          # Run health checks
          kubectl port-forward service/aicode-api 8080:80 -n aicode-production &
          sleep 15
          
          # Health check
          for i in {1..5}; do
            if curl -f http://localhost:8080/health; then
              echo "Health check passed"
              break
            else
              echo "Health check failed, attempt $i/5"
              sleep 10
            fi
          done
          
          pkill -f "kubectl port-forward"

      - name: Run production smoke tests
        run: |
          # Port forward for testing
          kubectl port-forward service/aicode-api 8080:80 -n aicode-production &
          sleep 10
          
          # Run smoke tests
          npm install -g newman
          newman run tests/postman/smoke-tests.json \
            --env-var "base_url=http://localhost:8080" \
            --reporters cli,junit \
            --reporter-junit-export smoke-test-results.xml
          
          pkill -f "kubectl port-forward"

      - name: Database Migration
        run: |
          kubectl create job migrate-$(date +%s) --from=cronjob/db-migrate -n aicode-production
          kubectl wait --for=condition=complete job/migrate-$(date +%s) -n aicode-production --timeout=300s

      - name: Update deployment status on success
        uses: bobheadxi/deployments@v1
        if: success()
        with:
          step: finish
          token: ${{ secrets.GITHUB_TOKEN }}
          status: success
          env: production
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}

      - name: Update deployment status on failure
        uses: bobheadxi/deployments@v1
        if: failure()
        with:
          step: finish
          token: ${{ secrets.GITHUB_TOKEN }}
          status: failure
          env: production
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}

      - name: Rollback on failure
        if: failure()
        run: |
          echo "Deployment failed, rolling back..."
          kubectl rollout undo deployment/aicode-api -n aicode-production
          kubectl rollout status deployment/aicode-api -n aicode-production --timeout=300s

  # Post-deployment monitoring
  post-deployment:
    name: Post-Deployment Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
    steps:
      - name: Setup monitoring alerts
        run: |
          # Enable enhanced monitoring for 1 hour after deployment
          curl -X POST "${{ secrets.MONITORING_WEBHOOK }}" \
            -H "Content-Type: application/json" \
            -d '{
              "action": "enable_enhanced_monitoring",
              "duration": 3600,
              "deployment": {
                "sha": "${{ github.sha }}",
                "environment": "${{ needs.environment-check.outputs.environment }}",
                "timestamp": "'$(date -Iseconds)'"
              }
            }'

      - name: Send deployment notification
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              text: "ðŸš€ Deployment completed",
              attachments: [{
                color: "good",
                fields: [
                  {
                    title: "Environment",
                    value: "${{ needs.environment-check.outputs.environment }}",
                    short: true
                  },
                  {
                    title: "Version",
                    value: "${{ github.sha }}",
                    short: true
                  },
                  {
                    title: "Repository",
                    value: "${{ github.repository }}",
                    short: true
                  }
                ]
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Security scan post-deployment
  security-scan:
    name: Security Scan (Post-deployment)
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always() && (needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success')
    steps:
      - name: Run OWASP ZAP security scan
        uses: zaproxy/action-full-scan@v0.7.0
        with:
          target: ${{ needs.environment-check.outputs.environment == 'production' && 'https://aicode-platform.com' || 'https://staging.aicode-platform.dev' }}
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

      - name: Upload ZAP scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: results.sarif