name: Security Automation

on:
  schedule:
    # Run security scans daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  # Dependency Vulnerability Scanning
  dependency-scan:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: |
          npm audit --audit-level=moderate --json > npm-audit-results.json || true
          npm audit --audit-level=moderate

      - name: Upload npm audit results
        uses: actions/upload-artifact@v4
        with:
          name: npm-audit-results
          path: npm-audit-results.json

      - name: Run Snyk vulnerability scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=medium --json > snyk-results.json

      - name: Upload Snyk scan results to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: snyk.sarif

  # Static Application Security Testing (SAST)
  sast-scan:
    name: SAST Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: typescript
          queries: +security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:typescript"

      - name: Run Semgrep SAST
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/owasp-top-ten
            p/nodejs
          publishToken: ${{ secrets.SEMGREP_TOKEN }}

  # Secret Scanning
  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

  # Container Security Scanning
  container-security:
    name: Container Security Scan
    runs-on: ubuntu-latest
    needs: [dependency-scan]
    if: github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: docker build -t security-scan-image:${{ github.sha }} .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: security-scan-image:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Docker Bench Security
        run: |
          docker run --rm --net host --pid host --userns host --cap-add audit_control \
            -e DOCKER_CONTENT_TRUST=$DOCKER_CONTENT_TRUST \
            -v /etc:/etc:ro \
            -v /usr/bin/containerd:/usr/bin/containerd:ro \
            -v /usr/bin/runc:/usr/bin/runc:ro \
            -v /usr/lib/systemd:/usr/lib/systemd:ro \
            -v /var/lib:/var/lib:ro \
            -v /var/run/docker.sock:/var/run/docker.sock:ro \
            --label docker_bench_security \
            docker/docker-bench-security > docker-bench-results.txt

      - name: Upload Docker Bench results
        uses: actions/upload-artifact@v4
        with:
          name: docker-bench-results
          path: docker-bench-results.txt

  # Infrastructure Security Scanning
  iac-security:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: infrastructure/
          framework: terraform,kubernetes,dockerfile
          output_format: sarif
          output_file_path: checkov-results.sarif

      - name: Upload Checkov scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: checkov-results.sarif

      - name: Run Terrascan
        uses: tenable/terrascan-action@main
        with:
          iac_type: terraform
          iac_dir: infrastructure/terraform/
          policy_type: aws
          only_warn: true
          sarif_upload: true

      - name: Run KICS (Kubernetes)
        uses: checkmarx/kics-github-action@master
        with:
          path: infrastructure/k8s/
          output_path: kics-results/
          platform_type: k8s
          output_formats: 'json,sarif'
          exclude_categories: 'Backup'

      - name: Upload KICS scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: kics-results/results.sarif

  # Security Policy Compliance
  compliance-check:
    name: Security Compliance Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for security.md
        run: |
          if [ ! -f SECURITY.md ]; then
            echo "SECURITY.md file is missing"
            exit 1
          fi

      - name: Verify security headers in code
        run: |
          # Check for security middleware
          if ! grep -r "helmet\|cors\|rate.*limit" src/middleware/; then
            echo "Security middleware not found"
            exit 1
          fi

      - name: Check for environment variable validation
        run: |
          # Check for environment validation
          if ! grep -r "joi\|yup\|zod" src/ | grep -i env; then
            echo "Environment variable validation not found"
            exit 1
          fi

      - name: Verify JWT implementation
        run: |
          # Check for proper JWT implementation
          if ! grep -r "jsonwebtoken\|jwt" src/auth/; then
            echo "JWT implementation not found"
            exit 1
          fi

      - name: Check for input validation
        run: |
          # Check for input validation
          if ! grep -r "joi\|express-validator" src/; then
            echo "Input validation not found"
            exit 1
          fi

  # Generate Security Report
  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [dependency-scan, sast-scan, secret-scan, container-security, iac-security, compliance-check]
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Generate security report
        run: |
          mkdir -p security-report
          
          # Create comprehensive security report
          cat > security-report/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <title>Security Scan Report</title>
              <style>
                  body { font-family: Arial, sans-serif; margin: 40px; }
                  .header { background: #f4f4f4; padding: 20px; border-radius: 5px; }
                  .section { margin: 20px 0; padding: 15px; border: 1px solid #ddd; border-radius: 5px; }
                  .critical { background: #f8d7da; border-color: #f5c6cb; }
                  .high { background: #fff3cd; border-color: #ffeaa7; }
                  .medium { background: #d1ecf1; border-color: #bee5eb; }
                  .low { background: #d4edda; border-color: #c3e6cb; }
                  .pass { background: #d4edda; color: #155724; }
                  .fail { background: #f8d7da; color: #721c24; }
                  table { width: 100%; border-collapse: collapse; }
                  th, td { padding: 10px; text-align: left; border-bottom: 1px solid #ddd; }
                  th { background-color: #f2f2f2; }
              </style>
          </head>
          <body>
              <div class="header">
                  <h1>Security Scan Report</h1>
                  <p>Generated: $(date -Iseconds)</p>
                  <p>Repository: ${{ github.repository }}</p>
                  <p>Branch: ${{ github.ref_name }}</p>
                  <p>Commit: ${{ github.sha }}</p>
              </div>

              <div class="section">
                  <h2>Scan Summary</h2>
                  <table>
                      <tr><th>Scan Type</th><th>Status</th><th>Issues Found</th></tr>
                      <tr><td>Dependency Scan</td><td class="${{ needs.dependency-scan.result == 'success' && 'pass' || 'fail' }}'">${{ needs.dependency-scan.result }}</td><td>Check artifacts</td></tr>
                      <tr><td>SAST Scan</td><td class="${{ needs.sast-scan.result == 'success' && 'pass' || 'fail' }}'">${{ needs.sast-scan.result }}</td><td>Check GitHub Security tab</td></tr>
                      <tr><td>Secret Scan</td><td class="${{ needs.secret-scan.result == 'success' && 'pass' || 'fail' }}'">${{ needs.secret-scan.result }}</td><td>Check logs</td></tr>
                      <tr><td>Container Security</td><td class="${{ needs.container-security.result == 'success' && 'pass' || 'fail' }}'">${{ needs.container-security.result }}</td><td>Check artifacts</td></tr>
                      <tr><td>IaC Security</td><td class="${{ needs.iac-security.result == 'success' && 'pass' || 'fail' }}'">${{ needs.iac-security.result }}</td><td>Check GitHub Security tab</td></tr>
                      <tr><td>Compliance Check</td><td class="${{ needs.compliance-check.result == 'success' && 'pass' || 'fail' }}'">${{ needs.compliance-check.result }}</td><td>-</td></tr>
                  </table>
              </div>

              <div class="section">
                  <h2>Next Steps</h2>
                  <ul>
                      <li>Review all failed scans and address critical/high severity issues</li>
                      <li>Check GitHub Security tab for detailed vulnerability reports</li>
                      <li>Download artifacts for detailed scan results</li>
                      <li>Update dependencies with known vulnerabilities</li>
                      <li>Implement additional security controls as needed</li>
                  </ul>
              </div>
          </body>
          </html>
          EOF

      - name: Upload security report
        uses: actions/upload-artifact@v4
        with:
          name: security-report
          path: security-report/

      - name: Comment on PR with security results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            const comment = `
            ## 🔒 Security Scan Results
            
            | Scan Type | Status |
            |-----------|--------|
            | Dependency Scan | ${{ needs.dependency-scan.result == 'success' && '✅ PASSED' || '❌ FAILED' }} |
            | SAST Scan | ${{ needs.sast-scan.result == 'success' && '✅ PASSED' || '❌ FAILED' }} |
            | Secret Scan | ${{ needs.secret-scan.result == 'success' && '✅ PASSED' || '❌ FAILED' }} |
            | Container Security | ${{ needs.container-security.result == 'success' && '✅ PASSED' || '❌ FAILED' }} |
            | Infrastructure Security | ${{ needs.iac-security.result == 'success' && '✅ PASSED' || '❌ FAILED' }} |
            | Compliance Check | ${{ needs.compliance-check.result == 'success' && '✅ PASSED' || '❌ FAILED' }} |
            
            📊 **Security Report**: Download the \`security-report\` artifact for detailed results.
            
            🔍 **Review Required**: Check the GitHub Security tab for detailed vulnerability information.
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # Security Notification
  notify-security:
    name: Security Notification
    runs-on: ubuntu-latest
    needs: [security-report]
    if: always() && (needs.dependency-scan.result == 'failure' || needs.sast-scan.result == 'failure' || needs.secret-scan.result == 'failure')
    steps:
      - name: Notify security team
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: |
            🚨 Security vulnerabilities detected in ${{ github.repository }}
            
            Branch: ${{ github.ref_name }}
            Commit: ${{ github.sha }}
            
            Please review the security scan results immediately.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SECURITY_SLACK_WEBHOOK_URL }}